name: demo-crm CI/CD

on:
  push:
    branches:
      - main

permissions:  
  contents: write  # Allows pushing tags

jobs:
  ci_build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get the latest tag from the repository and increment patch version
        id: increment_version
        run: |
          # Fetch tags from the main branch
          git fetch --tags --force --prune
        
          # List all tags for debugging
          echo "Available tags in the repository:"
          git tag -l

          # Get the latest tag (format x.y.z, numbers only)
          latest_tag=$(git tag -l | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -t. -k1,1nr -k2,2nr -k3,3nr | head -n 1)
            echo "Latest tag: $latest_tag"

    
          # If no tags are found, set the version to 1.0.0
          if [ -z "$latest_tag" ]; then
            new_tag="1.0.0"
        


          else
            # Extract major, minor, patch from the latest tag
            IFS='.' read -r major minor patch <<< "$latest_tag"

            # Increment the patch number by 1
            patch=$((patch + 1))
    
            # Form the new tag
            new_tag="${major}.${minor}.${patch}"
          fi
    
           echo "New version tag: $new_tag"
    
          # Use environment files instead of set-output for later use
          echo "NEW_TAG=$new_tag" >> $GITHUB_ENV
          # Create and push the new tag
          git tag "$new_tag"
          git push origin "$new_tag"

      - name: Build Docker image
        run: docker build -t demo-crm:${{ env.NEW_TAG }} .

      - name: Run Docker container
        run: docker run -d -p 3000:3000 demo-crm:${{ env.NEW_TAG }}

      - name: Check application
        run: |
          sleep 10
          curl http://localhost:3000

      - name: Configure AWS credentials
        run: aws configure set aws_access_key_id ${{ secrets.ECR_ACCESS_KEY }} && aws configure set aws_secret_access_key ${{ secrets.ECR_SECRET_KEY }} && aws configure set region ap-south-1
      - name: Authenticate Docker to AWS ECR
        run: aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 061051240345.dkr.ecr.ap-south-1.amazonaws.com
        # Authenticates Docker to AWS ECR using the AWS CLI.
      - name: Tag Docker image
        run: docker tag demo-crm:${{ env.NEW_TAG }} 061051240345.dkr.ecr.ap-south-1.amazonaws.com/development/demo-crm:${{ env.NEW_TAG }}
        # Tags the Docker image for the ECR repository.
      - name: Push Docker image to ECR
        run: docker push 061051240345.dkr.ecr.ap-south-1.amazonaws.com/development/demo-crm:${{ env.NEW_TAG }}
        # Pushes the Docker image to the specified ECR repository.
